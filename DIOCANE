import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class ImageRGB {

    public static void main(String[] args) {
        try {
            // Load the image
            File file = new File("path/to/your/image.jpg");
            BufferedImage image = ImageIO.read(file);

            // Get image width and height
            int width = image.getWidth();
            int height = image.getHeight();

            // Loop through each pixel to get RGB values
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    int pixel = image.getRGB(x, y);

                    // Extract RGB values
                    int red = (pixel >> 16) & 0xff;
                    int green = (pixel >> 8) & 0xff;
                    int blue = pixel & 0xff;

                    System.out.println("Pixel at (" + x + "," + y + ") - RGB: " + red + "," + green + "," + blue);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
---------------------------------------------------------------------------------------

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class ColoredPixelExample {

    public static void main(String[] args) {
        // Carica un'immagine esistente
        BufferedImage image;
        try {
            image = ImageIO.read(new File("path_to_your_image.jpg"));  // Sostituisci con il percorso della tua immagine
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // Coordiate del pixel da colorare
        int x = 100;
        int y = 150;

        // Colore desiderato
        Color newColor = Color.RED;

        // Imposta il colore del pixel
        setPixelColor(image, x, y, newColor);

        // Salva l'immagine modificata
        try {
            ImageIO.write(image, "jpg", new File("path_to_save_modified_image.jpg"));  // Sostituisci con il percorso desiderato
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void setPixelColor(BufferedImage image, int x, int y, Color color) {
        // Assicurati che le coordinate siano all'interno dell'immagine
        if (x >= 0 && x < image.getWidth() && y >= 0 && y < image.getHeight()) {
            // Imposta il colore del pixel
            image.setRGB(x, y, color.getRGB());
        } else {
            System.out.println("Coordinate del pixel fuori dai limiti dell'immagine.");
        }
    }
}

------------------------------------------------------

import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import java.awt.Color;

public class Main {
    public static void main(String[] args) {
        try {
            // Carica un'immagine
            BufferedImage image = ImageIO.read(new File("percorso_alla_tua_immagine"));

            // Ottieni il colore che desideri utilizzare
            Color myColor = new Color(255, 0, 0); // Rosso
            int rgb = myColor.getRGB();

            // Imposta il colore del pixel (x, y)
            image.setRGB(0, 0, rgb);

            // Salva l'immagine
            ImageIO.write(image, "jpg", new File("percorso_dove_salvare_l'immagine"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
