Colore blocchi non accessibili: (248,248,232)
								(144,128,72)
								(136,104,56)
								(104,72,40)
								(56,32,16)
								(64,40,24)

								(248,248,248)
								(112,112,112)
								(80,80,80)
								(40,64,80)

	

Comportamento Player:

	Quando il personaggio muore, per tot secondi lampeggia e può passare attraverso i nemici
	Quando urta un nemico, muore e fa un salto.

Le posizioni sono Float per dare fluidità nei movimenti

TODO:

	Movimento in base ai colori. 
		Problema: La posizione del player è la testa, deve essere il centro.
		Controllare i 5 pixel successivi.

	Nella classe Player implementare il contatore di bombe.

	mvc

	Esplosioni

	(Observer Observable)
	Aggiungere i nemici con tutta la parte del movimento
		due tipi di nemici con grafica e comportamento di gioco differenti

	power-up(almeno 3)


	Gestione interfaccia punti e vita + tempo
		Lista png punti
		Sprite Orologio


	Utilizzo appropriato di stream


	Piazzare la bomba + calcolo degli sprite dell'esplosione che deve comporre


	import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/*
 * Class to manage interaction with Keyboards
 */
public class Keyboard {
    private static final Map<Integer, Boolean> pressedKeys = new ConcurrentHashMap<>();
    private static final Map<Integer, Boolean> justReleasedKeys = new ConcurrentHashMap<>();

    static {
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(event -> {
            switch (event.getID()) {
                case KeyEvent.KEY_PRESSED:
                    pressedKeys.put(event.getKeyCode(), true);
                    justReleasedKeys.remove(event.getKeyCode());
                    break;
                case KeyEvent.KEY_RELEASED:
                    pressedKeys.remove(event.getKeyCode());
                    justReleasedKeys.put(event.getKeyCode(), true);
                    break;
            }
            return false;
        });
    }

    /*
     *  Returns a boolean value if a key is clicked 
     */
    public static boolean isKeyPressed(int keyCode) {
        return pressedKeys.containsKey(keyCode);
    }

    public static boolean isKeyJustReleased(int keyCode) {
        return justReleasedKeys.remove(keyCode) != null;
    }
}
